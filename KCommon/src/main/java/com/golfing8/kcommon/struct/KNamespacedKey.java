package com.golfing8.kcommon.struct;

import com.google.common.base.Preconditions;
import net.kyori.adventure.key.Key;
import org.bukkit.NamespacedKey;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Locale;
import java.util.UUID;
import java.util.regex.Pattern;

/**
 * A copy of the bukkit NamespacedKey class.
 * <p>
 * This was created as 1.8 MC doesn't have this class.
 * </p>
 */
public class KNamespacedKey implements Key {
    private static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+");
    private static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+");

    /**
     * The namespace representing all inbuilt keys.
     */
    public static final String MINECRAFT = "minecraft";
    /**
     * The namespace representing all keys generated by Bukkit for backwards
     * compatibility measures.
     */
    public static final String BUKKIT = "bukkit";
    /**
     * The namespace representing all kcommon keys.
     */
    public static final String KCOMMON = "kcommon";

    private static boolean isValidNamespaceChar(char c) {
        return (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || c == '.' || c == '_' || c == '-';
    }

    private static boolean isValidKeyChar(char c) {
        return isValidNamespaceChar(c) || c == '/';
    }

    private static boolean isValidNamespace(String namespace) {
        int len = namespace.length();
        if (len == 0) {
            return false;
        }

        for (int i = 0; i < len; i++) {
            if (!isValidNamespaceChar(namespace.charAt(i))) {
                return false;
            }
        }

        return true;
    }

    private static boolean isValidKey(String key) {
        int len = key.length();
        if (len == 0) {
            return false;
        }

        for (int i = 0; i < len; i++) {
            if (!isValidKeyChar(key.charAt(i))) {
                return false;
            }
        }

        return true;
    }

    private final String namespace;
    private final String key;

    public KNamespacedKey(String namespace, String key) {
        Preconditions.checkArgument((namespace != null && VALID_NAMESPACE.matcher(namespace).matches()), String.format("Invalid namespace. Must be [a-z0-9._-]: %s", namespace));
        Preconditions.checkArgument((key != null && VALID_KEY.matcher(key).matches()), String.format("Invalid key. Must be [a-z0-9/._-]: %s", key));
        this.namespace = namespace;
        this.key = key;
        String string = toString();
        Preconditions.checkArgument((string.length() < 256), "KNamespacedKey must be less than 256 characters", string);
    }

    public KNamespacedKey(Plugin plugin, String key) {
        Preconditions.checkArgument((plugin != null), "Plugin cannot be null");
        Preconditions.checkArgument((key != null), "Key cannot be null");
        this.namespace = plugin.getName().toLowerCase(Locale.ROOT);
        this.key = key.toLowerCase(Locale.ROOT);
        Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), String.format("Invalid namespace. Must be [a-z0-9._-]: %s", this.namespace));
        Preconditions.checkArgument(VALID_KEY.matcher(this.key).matches(), String.format("Invalid key. Must be [a-z0-9/._-]: %s", this.key));
        String string = toString();
        Preconditions.checkArgument((string.length() < 256), String.format("KNamespacedKey must be less than 256 characters (%s)", string));
    }

    /**
     * Get a key in the Minecraft namespace.
     *
     * @param key the key to use
     * @return new key in the Minecraft namespace
     */
    @NotNull
    public static KNamespacedKey minecraft(@NotNull String key) {
        return new KNamespacedKey(MINECRAFT, key);
    }

    /**
     * Get a NamespacedKey from the supplied string with a default namespace if
     * a namespace is not defined. This is a utility method meant to fetch a
     * NamespacedKey from user input. Please note that casing does matter and
     * any instance of uppercase characters will be considered invalid. The
     * input contract is as follows:
     * <pre>
     * fromString("foo", plugin) -{@literal >} "plugin:foo"
     * fromString("foo:bar", plugin) -{@literal >} "foo:bar"
     * fromString(":foo", null) -{@literal >} "minecraft:foo"
     * fromString("foo", null) -{@literal >} "minecraft:foo"
     * fromString("Foo", plugin) -{@literal >} null
     * fromString(":Foo", plugin) -{@literal >} null
     * fromString("foo:bar:bazz", plugin) -{@literal >} null
     * fromString("", plugin) -{@literal >} null
     * </pre>
     *
     * @param string the string to convert to a KNamespacedKey
     * @param defaultNamespace the default namespace to use if none was
     * supplied. If null, the {@code minecraft} namespace
     * ({@link #minecraft(String)}) will be used
     * @return the created NamespacedKey. null if invalid key
     * @see #fromString(String)
     */
    @Nullable
    public static KNamespacedKey fromString(@NotNull String string, @Nullable Plugin defaultNamespace) {
        // Paper - Return null for empty string, check length
        Preconditions.checkArgument(string != null, "Input string must not be null");
        if (string.isEmpty() || string.length() > Short.MAX_VALUE) return null;
        // Paper end - Return null for empty string, check length

        String[] components = string.split(":", 3);
        if (components.length > 2) {
            return null;
        }

        String key = (components.length == 2) ? components[1] : "";
        if (components.length == 1) {
            String value = components[0];
            if (value.isEmpty() || !isValidKey(value)) {
                return null;
            }

            return (defaultNamespace != null) ? new KNamespacedKey(defaultNamespace, value) : minecraft(value);
        } else if (components.length == 2 && !isValidKey(key)) {
            return null;
        }

        String namespace = components[0];
        if (namespace.isEmpty()) {
            return (defaultNamespace != null) ? new KNamespacedKey(defaultNamespace, key) : minecraft(key);
        }

        if (!isValidNamespace(namespace)) {
            return null;
        }

        return new KNamespacedKey(namespace, key);
    }

    /**
     * Get a KNamespacedKey from the supplied string.
     *
     * The default namespace will be Minecraft's (i.e.
     * {@link #minecraft(String)}).
     *
     * @param key the key to convert to a NamespacedKey
     * @return the created NamespacedKey. null if invalid
     * @see #fromString(String, Plugin)
     */
    @Nullable
    public static KNamespacedKey fromString(@NotNull String key) {
        return fromString(key, null);
    }

    
    public String getNamespace() {
        return this.namespace;
    }

    
    public String getKey() {
        return this.key;
    }

    public NamespacedKey toBukkit() {
        return new NamespacedKey(this.namespace, this.key);
    }

    @Override
    public @NotNull String namespace() {
        return namespace;
    }

    @Override
    public @NotNull String value() {
        return key;
    }

    @Override
    public @NotNull String asString() {
        return toString();
    }

    public int hashCode() {
        int hash = 5;
        hash = 47 * hash + this.namespace.hashCode();
        hash = 47 * hash + this.key.hashCode();
        return hash;
    }

    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        KNamespacedKey other = (KNamespacedKey)obj;
        return (this.namespace.equals(other.namespace) && this.key.equals(other.key));
    }

    public String toString() {
        return this.namespace + ":" + this.key;
    }

    @Deprecated
    public static KNamespacedKey randomKey() {
        return new KNamespacedKey("kcommon", UUID.randomUUID().toString());
    }
}
